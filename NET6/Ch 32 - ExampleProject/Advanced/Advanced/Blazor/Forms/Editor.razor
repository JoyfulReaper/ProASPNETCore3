@page "/forms/edit/{id:long}"
@layout EmptyLayout
@*@implements IDisposable*@
@*@inherits OwningComponentBase*@
@inherits OwningComponentBase<DataContext>
@*@using Microsoft.Extensions.DependencyInjection*@

<link href="/blazorValidation.css" rel="stylesheet" />
<h4 class="bg-primary text-center text-white p-2">Edit</h4>
<h6 class="bg-info text-center text-white p-2">@FormSubmitMessage</h6>

<FormSpy PersonData="PersonData">
	<EditForm Model="PersonData" OnValidSubmit="HandleValidSubmit"
		OnInvalidSubmit="HandleInvalidSubmit">
		<DataAnnotationsValidator />
		<ValidationSummary />
		<div class="form-group">
			<label>Person ID</label>
			<InputNumber class="form-control" @bind-Value="PersonData.PersonId" disabled />
		</div>
		<div class="form-group">
			<label>FirstName</label>
			<ValidationMessage For="@(() => PersonData.FirstName)" />
			<InputText class="form-control" @bind-Value="PersonData.FirstName" />
		</div>
		<div class="form-group">
			<label>LastName</label>
			<ValidationMessage For="@(() => PersonData.LastName)" />
			<InputText class="form-control" @bind-Value="PersonData.LastName" />
		</div>
		<div class="form-group">
			<label>Department Id</label>
			<ValidationMessage For="@(() => PersonData.DepartmentId)" />
			<CustomSelect TValue="long" Values="Departments"
				Parser="@(str => long.Parse(str))"
				@bind-Value="PersonData.DepartmentId">
				<option selected disabled value="0">Choose a Department</option>
			</CustomSelect>
		</div>
		<div class="form-group">
			<label>Location Id</label>
			<ValidationMessage For="@(() => PersonData.LocationId)" />
			<CustomSelect TValue="long" Values="Locations"
				Parser="@(str => long.Parse(str))"
				@bind-Value="PersonData.DepartmentId">
				<option selected disabled value="0">Choose a Location</option>
			</CustomSelect>
		</div>
		<div class="text-center">
			<button type="submit" class="btn btn-primary">Submit</button>
			<NavLink class="btn btn-secondary" href="/forms">Back</NavLink>
		</div>
	</EditForm>
</FormSpy>

@code {
	[Inject]
	public NavigationManager NavManager { get; set; }

	//[Inject]
	//DataContext Context => ScopedServices.GetService<DataContext>();
	DataContext Context => Service;

	[Parameter]
	public long Id { get; set; }

	public Person PersonData { get; set; } = new Person();

	public IDictionary<string, long> Departments { get; set; }
		= new Dictionary<string, long>();

	public IDictionary<string, long> Locations { get; set; }
		= new Dictionary<string, long>();

	public string FormSubmitMessage { get; set; } = "Form Data Not Submitted";

	public void HandleValidSubmit() => FormSubmitMessage = "Valid Data Submitted";
	public void HandleInvalidSubmit() => FormSubmitMessage = "Invalid Data Submitted";

	protected async override Task OnParametersSetAsync()
	{
		PersonData = await Context.People.FindAsync(Id);
		Departments = await Context.Departments
			.ToDictionaryAsync(d => d.Name, d => d.DepartmentId);
		Locations = await Context.Locations
			.ToDictionaryAsync(l => $"{l.City}, {l.State}", l => l.LocationId);
	}

	//public void Dispose() => Context.Entry(PersonData).State = EntityState.Detached;
}

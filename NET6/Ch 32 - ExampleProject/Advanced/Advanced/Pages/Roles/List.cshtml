@page
@model ListModel

<table class="table table-sm table-bordered">
	<tr>
		<th>Id</th><th>Name</th><th>Members</th><th></th>
	</tr>
	@if (Model.Roles.Count() == 0)
	{
		<tr><td colspan="4" class="text-center">No Roles</tr>
	} else
	{
		foreach(IdentityRole role in Model.Roles)
		{
			<tr>
				<td>@role.Id</td>
				<td>@role.Name</td>
				<td>@(await Model.GetMembersString(role.Name))</td>
				<td class="text-center">
					<form asp-page="List" method="post">
						<input type="hidden" name="Id" value="@role.Id">
						<a class="btn btn-sm btn-warning" asp-page="Editor"
							asp-route-id="@role.Id" asp-route-mode="edit">Edit</a>
						<button type="submit" class="btn btn-sm btn-danger">
							Delete
						</button>
					</form>
				</td>
			</tr>
		}
	}
</table>

<a class="btn btn-primary" asp-page="create">Create</a>

@functions {
	public class ListModel : AdminPageModel
	{
		private UserManager<IdentityUser> _userManager;
		private RoleManager<IdentityRole> _roleManager;

		public ListModel (UserManager<IdentityUser> userManager, RoleManager<IdentityRole> roleManager)
		{
			_userManager = userManager;
			_roleManager = roleManager;
		}

		public IEnumerable<IdentityRole> Roles { get; set; } = Enumerable.Empty<IdentityRole>();

		public void OnGet()
		{
			Roles = _roleManager?.Roles ?? Enumerable.Empty<IdentityRole>();
		}

		public async Task<string> GetMembersString(string role)
		{
			IEnumerable<IdentityUser> users = (await _userManager.GetUsersInRoleAsync(role));
			string result = users.Count() == 0
				? "No members"
				: string.Join(", ", users.Take(3).Select(u => u.UserName).ToArray());
			return users.Count() > 3 ? $"{result}, (plus others)" : result;
		}

		public async Task<IActionResult> OnPostAsync(string id)
		{
			IdentityRole role = await _roleManager.FindByIdAsync(id);
			await _roleManager.DeleteAsync(role);
			return RedirectToPage();
		}

	}
}
@page "{id}"
@model EditorModel

<h5 class="bg-primary text-white text-center p-2">Edit Role: @Model.Role.Name</h5>
<form method="post">
	<input type="hidden" name="rolename" value="@Model.Role.Name" />
	<div asp-validation-summary="All"></div>
	<h5 class="bg-secondary text-white p-2">Members</h5>
	<table class="table table-sm table-striped table-bordered">
		<thead>
			<tr>
				<th>User</th>
				<th>Email</th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			@if ((await Model.Members()).Count() == 0)
			{
				<tr>
					<td colspan="3" class="text-center">No Members</td>
				</tr>
			}
			@foreach (IdentityUser user in await Model.Members())
			{
				<tr>
					<td>@user.UserName</td>
					<td>@user.Email</td>
					<td>
						<button asp-route-userid="@user.Id"
							class="btn btn-sm btn-primary" type="submit">
							Change
						</button>
					</td>
				</tr>
			}
		</tbody>
	</table>


	<h5 class="bg-secondary text-white p-2">Non-Members</h5>
	<table class="table table-sm table-striped table-bordered">
		<thead>
			<tr>
				<th>User</th>
				<th>Email</th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			@if ((await Model.NonMembers()).Count() == 0)
			{
				<tr>
					<td colspan="3" class="text-center">No non-members</td>
				</tr>
			}
			@foreach (IdentityUser user in await Model.NonMembers())
			{
				<tr>
					<td>@user.UserName</td>
					<td>@user.Email</td>
					<td>
						<button asp-route-userid="@user.Id"
							class="btn btn-sm btn-primary" type="submit">
							Change
						</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
</form>
<a class="btn btn-secondary" asp-page="list">Back</a>



@functions {
	public class EditorModel : AdminPageModel
	{
		private UserManager<IdentityUser> _userManager;
		private RoleManager<IdentityRole> _roleManager;

		public EditorModel(UserManager<IdentityUser> userManager, RoleManager<IdentityRole> roleManager)
		{
			_userManager = userManager;
			_roleManager = roleManager;
		}

		public IdentityRole Role { get; set; }

		public Task<IList<IdentityUser>> Members() =>
			_userManager.GetUsersInRoleAsync(Role.Name);

		public async Task<IEnumerable<IdentityUser>> NonMembers() =>
			_userManager.Users.ToList().Except(await Members());

		public async Task OnGetAsync(string id)
		{
			Role = await _roleManager.FindByIdAsync(id);
		}

		public async Task<IActionResult> OnPostAsync(string userId, string roleName)
		{
			Role = await _roleManager.FindByNameAsync(roleName);
			IdentityUser user = await _userManager.FindByIdAsync(userId);
			IdentityResult result;
			if (await _userManager.IsInRoleAsync(user, roleName))
			{
				result = await _userManager.RemoveFromRoleAsync(user, roleName);
			}
			else
			{
				result = await _userManager.AddToRoleAsync(user, roleName);
			}
			if (result.Succeeded)
			{
				return RedirectToPage();
			}
			foreach (IdentityError err in result.Errors)
			{
				ModelState.AddModelError("", err.Description);
			}
			return Page();
		}
	}
}

@page "{id}"
@model EditorModel

<h5 class="bg-warning text-white text-center p-2">Edit User</h5>
<form method="post">
	<div asp-validation-summary="All" class="text-danger"></div>
	<div class="form-group">
		<label>ID</label>
		<input name="Id" class="form-control" value="@Model.Id" disabled />
		<input name="Id" type="hidden" value="@Model.Id" disabled />
	</div>
	<div class="form-group">
		<label>User Name</label>
		<input name="UserName" class="form-control" value="@Model.UserName" />
	</div>
	<div class="form-group">
		<label>Email</label>
		<input name="Email" class="form-control" value="@Model.Email" />
	</div>
	<div class="form-group">
		<label>Password</label>
		<input name="Password" class="form-control" value="@Model.Password" />
	</div>
	<button type="submit" class="btn btn-primary">Submit</button>
	<a class="btn btn-secondary" asp-page="list">Back</a>
</form>

@functions {
	public class EditorModel : AdminPageModel
	{
		private UserManager<IdentityUser> _userManager;

		public EditorModel(UserManager<IdentityUser> userManager)
		{
			_userManager = userManager;
		}

		[BindProperty][Required]
		public string Id { get; set; }

		[BindProperty][Required]
		public string UserName { get; set; }

		[BindProperty][Required][EmailAddress]
		public string Email { get; set; }

		[BindProperty]
		public string? Password { get; set; }

		public async Task OnGetAsync(string id)
		{
			IdentityUser user = await _userManager.FindByIdAsync(id);
			Id = user.Id;
			UserName = user.UserName;
			Email = user.Email;
		}

		public async Task<IActionResult> OnPostAsync()
		{
			if(ModelState.IsValid)
			{
				IdentityUser user = await _userManager.FindByIdAsync(Id);
				user.UserName = UserName;
				user.Email = Email;
				IdentityResult result = await _userManager.UpdateAsync(user);
				if(result.Succeeded && !String.IsNullOrEmpty(Password))
				{
					await _userManager.RemovePasswordAsync(user);
					result = await _userManager.AddPasswordAsync(user,Password);
				}
				if(result.Succeeded)
				{
					return RedirectToPage("List");
				}
				foreach(IdentityError err in result.Errors)
				{
					ModelState.AddModelError("", err.Description);
				}
			}
			return Page();
		}
	}
}
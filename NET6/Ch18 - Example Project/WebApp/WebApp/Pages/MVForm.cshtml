@page "/pages/mvform/{id:long?}"
@model MVFormHandlerModel
@using Microsoft.AspNetCore.Mvc.RazorPages
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Mvc.ModelBinding

<partial name="_Validation" />

<div class="m-2">
	<h5 class="bg-primary text-white text-center p-2 m-2">HTML Form</h5>

	<form asp-page="MVForm" method="post" id="htmlform">
	
		@Html.ValidationSummary(false, "", new {@class = "text-danger"})

		<div class="form-group">
			<label>Name</label>
			<div><span asp-validation-for="Product.Name" class="text-danger"></span></div>
			<input class="form-control" asp-for="Product.Name" />
		</div>
		<div class="form-group">
			<label>Price</label>
			<div><span asp-validation-for="Product.Price" class="text-danger"></span></div>
			<input class="form-control" asp-for="Product.Price" />
		</div>
		<div class="form-group">
			<label>CategoryId</label>
			<div><span asp-validation-for="Product.CategoryId" class="text-danger"></span></div>
			<input class="form-control" asp-for="Product.CategoryId" />
		</div>
		<div class="form-group">
			<label>Supplier</label>
			<div><span asp-validation-for="Product.SupplierId" class="text-danger"></span></div>
			<input class="form-control" asp-for="Product.SupplierId" />
		</div>
		<button type="submit" class="btn btn-primary">Submit</button>
	</form>
	<button form="htmlform" asp-page="MVFormHandler" class="btn btn-primary mt-2">Submit (Outside x Form)</button>
</div>

@functions {

	public class MVFormHandlerModel : PageModel
	{
		private readonly DataContext _context;

		public MVFormHandlerModel(DataContext context)
		{
			_context = context;
		}

		[BindProperty]
		public Product Product { get; set; }

		public async Task OnGetAsync(long id = 1)
		{
			Product = await _context.Products
			.FirstAsync(p => p.ProductId == id);
		}

		public IActionResult OnPost()
		{
			//if(string.IsNullOrEmpty(Product.Name))
			//{
			//	ModelState.AddModelError("Product.Name", "Enter a name");
			//}

			//if(ModelState.GetValidationState("Product.Price")
			//	== ModelValidationState.Valid && Product.Price < 1)
			//{
			//	ModelState.AddModelError("Product.Price", "Enter a positive price");
			//}

			//if(ModelState.GetFieldValidationState("Product.Name")
			//	== ModelValidationState.Valid
			//	&& ModelState.GetValidationState("Product.Price")
			//	== ModelValidationState.Valid
			//	&& Product.Name.ToLower().StartsWith("small")
			//	&& Product.Price > 100)
			//{
			//	ModelState.AddModelError("", "Small products cannot cost more than $100");
			//}

			//if(!_context.Categories.Any(c => c.CategoryId == Product.CategoryId))
			//{
			//	ModelState.AddModelError("Product.CategoryId", "Enter an existing category ID");
			//}

			//if(!_context.Suppliers.Any(s => s.SupplierId == Product.SupplierId))
			//{
			//	ModelState.AddModelError("Product.SupplierId", "Enter an existing suplier ID");
			//}

			if(ModelState.IsValid)
			{
				TempData["name"] = Product.Name;
				TempData["price"] = Product.Price.ToString();
				TempData["categoryId"] = Product.CategoryId.ToString();
				TempData["suppliedId"] = Product.SupplierId.ToString();
				return RedirectToPage("FormResults");
			}

			return Page();
		}
	}
}